#	Example:
# 
#	example_dynamic_modifier = {
#		icon = "GFX_idea_unknown" # optional, will show up in guis if icon is specified
#		enable = { always = yes } #optional, the modifier won't apply if not enabled
#		remove_trigger = { always = no } #optional, will remove the modifier if true
#
#		# list of modifiers
#		fuel_cost = 321
#		max_fuel = var_max_fuel # will be taken from a variable
#	}
#
#
#	In a script file:
#
#	effect = {
#		add_dynamic_modifier = {
#			modifier = example_dynamic_modifier
#			scope = GER # optional, if you specify this your dynamic modifier scoped to this scope (root is the effect scope)
#			days = 14 # optional, will be removed after this many days passes
#		}
#	}
#
#	can be added to countries, states or unit leaders
#	will only updated daily, unless forced by force_update_dynamic_modifier effect


SWE_local_guarantees = {
	enable = { is_controlled_by = SWE }
	remove_trigger = {
		OR = {
			owner = { NOT = { has_government = communism } }
			NOT = { is_owned_by = SWE }
		}
	}
	icon = GFX_modifiers_state_manpower
	
	state_production_speed_buildings_factor = 0.10
	local_intel_to_enemies = -0.15
}
SWE_political_dynamic_mod = {	# To avoid bunch of national spirits later, unused for now
	enable = { original_tag = SWE }
	
	icon = GFX_generic_manpower
	
	stability_factor = SWE_pol_stability_factor
	party_popularity_stability_factor = SWE_pol_party_popularity_stability_factor
	defensive_war_stability_factor = SWE_pol_defensive_war_stability_factor
	war_support_factor = SWE_pol_war_support_factor
	
	research_speed_factor = SWE_pol_research_speed_factor
	
	political_advisor_cost_factor = SWE_pol_political_advisor_cost_factor
	economy_cost_factor = SWE_pol_economy_cost_factor
	trade_laws_cost_factor = SWE_pol_trade_laws_cost_factor
	
	min_export = SWE_pol_min_export
	
	political_power_factor = SWE_pol_political_power_factor
	political_power_cost = SWE_pol_political_power_cost
	
	democratic_drift = SWE_pol_democratic_drift
	communism_drift = SWE_pol_communism_drift
	fascism_drift = SWE_pol_fascism_drift
	neutrality_drift = SWE_pol_neutrality_drift
	drift_defence_factor = SWE_pol_drift_defence_factor
}
SWE_emigration_problem = {
	enable = { original_tag = SWE }
	remove_trigger = {
		OR = {
			has_country_flag = swe_end_of_emigration
			check_variable = {
				var = SWE.SWE_emigration_monthly_population
				compare = greater_than_or_equals
				value = 0
			}
		}
	}
	icon = GFX_modifiers_state_manpower
	
	monthly_population = SWE_emigration_monthly_population
	stability_factor = SWE_emigration_stability_factor
}
SWE_svenska_varnplikten = {
	enable = { original_tag = SWE }
	
	icon = GFX_SWE_varnplikt
	
	mobilization_speed = SWE_mil_mobilization_speed
	training_time_factor = SWE_mil_training_time_factor
	industrial_capacity_factory = SWE_mil_industrial_capacity_factory
	industrial_capacity_dockyard = SWE_mil_industrial_capacity_dockyard
	experience_gain_army_factor = SWE_mil_experience_gain_army_factor
	experience_gain_army_unit_factor = SWE_mil_experience_gain_army_unit_factor
	army_defence_factor = SWE_mil_army_defence_factor
	army_attack_factor = SWE_mil_army_attack_factor
	army_infantry_attack_factor = SWE_mil_infantry_attack_factor
	army_infantry_defence_factor = SWE_mil_infantry_defence_factor
	army_core_defence_factor = SWE_mil_army_core_defence_factor
	max_planning_factor = SWE_mil_max_planning_factor
	planning_speed = SWE_mil_planning_speed
	supply_consumption_factor = SWE_mil_supply_consumption_factor
}